# Test executables

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${TEST_CFLAGS}")

add_executable(aul_test
		aul_test.c) 
target_link_libraries(aul_test aul ${pkgs_LDFLAGS})
INSTALL(TARGETS aul_test DESTINATION bin)

add_executable(launch_app
		launch_app.c) 
target_link_libraries(launch_app aul ${pkgs_LDFLAGS})
INSTALL(TARGETS launch_app DESTINATION bin)

add_executable(open_app
                open_app.c)
target_link_libraries(open_app aul ${pkgs_LDFLAGS})
INSTALL(TARGETS open_app DESTINATION bin)

add_executable(dbusapp_test
		dbusapp_test.c) 
target_link_libraries(dbusapp_test aul ${pkgs_LDFLAGS})

add_executable(aul_dbus
		aul_dbus.c) 
target_link_libraries(aul_dbus aul ${pkgs_LDFLAGS})

add_executable(test_app
		app_test.c)
set_target_properties(test_app PROPERTIES COMPILE_FLAGS "-fpie")
target_link_libraries(test_app "-pie" aul ${pkgs_LDFLAGS} )



### Unit tests ###
## avatar test ##
#add_library(test_avatar STATIC EXCLUDE_FROM_ALL
#	test_avatar.c)
#target_link_libraries(test_avatar avatar_v2_lib)

## Main test function ##
#add_executable(test_all EXCLUDE_FROM_ALL test.c)
#target_link_libraries(test_all test_avatar)
#set_target_properties(test_all
#		PROPERTIES SKIP_BUILD_RPATH true
#		) # remove rpath option that is automatically generated by cmake.

## 'test' target in Makefile ##
# Run test by 'make test'
#add_custom_target(test
#	COMMAND ./test_all
#	DEPENDS test_all
#	WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
#	COMMENT ""
#	)
